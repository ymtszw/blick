var _user$project$Blick_View_Editor$submitButton = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('field'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('control'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('button is-link is-small is-rounded'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('submit'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Submit'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
var _user$project$Blick_View_Editor$valueOrDefaultValue = F2(
	function (transformPrev, _p0) {
		var _p1 = _p0;
		var _p2 = _p1.edit;
		switch (_p2.ctor) {
			case 'UnTouched':
				return _elm_lang$html$Html_Attributes$defaultValue(
					transformPrev(_p1.prev));
			case 'AutoCompleted':
				return _elm_lang$html$Html_Attributes$value(_p2._0);
			default:
				return _elm_lang$html$Html_Attributes$value(_p2._0);
		}
	});
var _user$project$Blick_View_Editor$rawTextInput = F4(
	function (isRequired, maybeSuggestions, selectedSuggestion, _p3) {
		var _p4 = _p3;
		var _p7 = _p4.field;
		var _p6 = _p4;
		var textInput = function (keydownHandler) {
			return A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('input is-small is-rounded'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('text'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id(
								A2(_user$project$Blick_Type$inputId, _p4.matId, _p7)),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name(_p7.name_),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder(_p7.name_),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$autocomplete(false),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$required(isRequired),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$Blick_View_Editor$valueOrDefaultValue,
													_elm_lang$core$Maybe$withDefault(''),
													_p7.value_),
												_1: {
													ctor: '::',
													_0: keydownHandler,
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onInput(
															function (_p5) {
																return A2(
																	_user$project$Blick_Type$InputEdit,
																	_p6,
																	A2(
																		_user$project$Blick_Type$Editable,
																		_p7.value_.prev,
																		_user$project$Blick_Type$ManualInput(_p5)));
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'});
		};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('field'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('control'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$core$Maybe$withDefault,
							textInput(
								_elm_lang$html$Html_Attributes$style(
									{ctor: '[]'})),
							A2(
								_elm_lang$core$Maybe$map,
								function (suggestions) {
									return A4(
										_user$project$Blick_View_Suggestion$dropdown,
										selectedSuggestion,
										_p6,
										A2(_elm_lang$core$List$take, _user$project$Blick_Constant$maxSuggestions, suggestions),
										textInput);
								},
								maybeSuggestions)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Blick_View_Editor$orgEmailInput = F3(
	function (memberNames, selectedSuggestion, _p8) {
		var _p9 = _p8;
		var _p13 = _p9.field;
		var _p12 = _p9;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('field has-addons'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('control has-text-right'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A4(
							_user$project$Blick_View_Suggestion$dropdown,
							selectedSuggestion,
							_p12,
							A2(_elm_lang$core$List$take, _user$project$Blick_Constant$maxSuggestions, memberNames),
							function (keydownHandler) {
								return A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('input is-small is-rounded has-text-right'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$type_('text'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$id(
													A2(_user$project$Blick_Type$inputId, _p9.matId, _p13)),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$name(_p13.name_),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$placeholder('author.name'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$autocomplete(false),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$required(true),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_user$project$Blick_View_Editor$valueOrDefaultValue,
																		function (_p10) {
																			return _user$project$Blick_View_Parts$orgLocalNameOrEmail(
																				_user$project$Blick_Type$Email(
																					A2(_elm_lang$core$Maybe$withDefault, '', _p10)));
																		},
																		_p13.value_),
																	_1: {
																		ctor: '::',
																		_0: keydownHandler,
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Events$onInput(
																				function (_p11) {
																					return A2(
																						_user$project$Blick_Type$InputEdit,
																						_p12,
																						A2(
																							_user$project$Blick_Type$Editable,
																							_p13.value_.prev,
																							_user$project$Blick_Type$ManualInput(_p11)));
																				}),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									},
									{ctor: '[]'});
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('control'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('button is-small is-static is-rounded has-text-left'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(_user$project$Blick_Constant$atOrgDomain),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Blick_View_Editor$filterMembers = F2(
	function (_p14, members) {
		var _p15 = _p14;
		var _p16 = _p15.edit;
		switch (_p16.ctor) {
			case 'UnTouched':
				return {ctor: '[]'};
			case 'AutoCompleted':
				return {ctor: '[]'};
			default:
				if (_p16._0 === '') {
					return {ctor: '[]'};
				} else {
					var lv = _elm_lang$core$String$toLower(_p16._0);
					return A2(
						_elm_lang$core$List$filter,
						function (_p17) {
							var _p18 = _p17;
							var le = _elm_lang$core$String$toLower(_p18._0);
							return A2(_elm_lang$core$String$startsWith, lv, le) || A2(
								_elm_lang$core$String$startsWith,
								lv,
								A2(_elm_community$string_extra$String_Extra$rightOf, '.', le));
						},
						members);
				}
		}
	});
var _user$project$Blick_View_Editor$inputByField = F2(
	function (_p20, _p19) {
		var _p21 = _p20;
		var _p31 = _p21.selectedSuggestion;
		var _p22 = _p19;
		var _p30 = _p22.field;
		var _p29 = _p22;
		var _p23 = _p30.name_;
		if (_p23 === 'author_email') {
			var filteredMembers = A2(_user$project$Blick_View_Editor$filterMembers, _p30.value_, _p21.members);
			var _p24 = A2(
				_elm_lang$core$Maybe$map,
				_elm_lang$core$String$endsWith(_user$project$Blick_Constant$atOrgDomain),
				_p30.value_.prev);
			if ((_p24.ctor === 'Just') && (_p24._0 === false)) {
				return A4(
					_user$project$Blick_View_Editor$rawTextInput,
					true,
					_elm_lang$core$Maybe$Just(
						A2(
							_elm_lang$core$List$map,
							function (_p25) {
								var _p26 = _p25;
								return _p26._0;
							},
							filteredMembers)),
					_p31,
					_p29);
			} else {
				return A3(
					_user$project$Blick_View_Editor$orgEmailInput,
					A2(
						_elm_lang$core$List$map,
						function (_p27) {
							var _p28 = _p27;
							return A2(_elm_community$string_extra$String_Extra$leftOfBack, _user$project$Blick_Constant$atOrgDomain, _p28._0);
						},
						filteredMembers),
					_p31,
					_p29);
			}
		} else {
			return A4(_user$project$Blick_View_Editor$rawTextInput, true, _elm_lang$core$Maybe$Nothing, _p31, _p29);
		}
	});
var _user$project$Blick_View_Editor$formHeightWithMargin = 75.0;
var _user$project$Blick_View_Editor$buttonHeightAndGap = 39.0;
var _user$project$Blick_View_Editor$formContents = F3(
	function (buttonComesFirst, model, editState) {
		return buttonComesFirst ? {
			ctor: '::',
			_0: _user$project$Blick_View_Editor$submitButton,
			_1: {
				ctor: '::',
				_0: A2(_user$project$Blick_View_Editor$inputByField, model, editState),
				_1: {ctor: '[]'}
			}
		} : {
			ctor: '::',
			_0: A2(_user$project$Blick_View_Editor$inputByField, model, editState),
			_1: {
				ctor: '::',
				_0: _user$project$Blick_View_Editor$submitButton,
				_1: {ctor: '[]'}
			}
		};
	});
var _user$project$Blick_View_Editor$formTopAndSwitch = F2(
	function (height, clickedDomTop) {
		return (_elm_lang$core$Native_Utils.cmp(
			clickedDomTop + _user$project$Blick_View_Editor$formHeightWithMargin,
			_elm_lang$core$Basics$toFloat(height)) > -1) ? {ctor: '_Tuple2', _0: clickedDomTop - _user$project$Blick_View_Editor$buttonHeightAndGap, _1: true} : {ctor: '_Tuple2', _0: clickedDomTop, _1: false};
	});
var _user$project$Blick_View_Editor$sanitizeEmail = function (input) {
	return A2(_elm_lang$core$String$contains, '@', input) ? input : A2(_elm_lang$core$Basics_ops['++'], input, _user$project$Blick_Constant$atOrgDomain);
};
var _user$project$Blick_View_Editor$finalizeEdit = function (_p32) {
	var _p33 = _p32;
	var _p37 = _p33.value_;
	var _p36 = _p33;
	var _p34 = _p33.name_;
	if (_p34 === 'author_email') {
		var _p35 = _p37.edit;
		switch (_p35.ctor) {
			case 'ManualInput':
				return _elm_lang$core$Native_Utils.update(
					_p36,
					{
						value_: _elm_lang$core$Native_Utils.update(
							_p37,
							{
								edit: _user$project$Blick_Type$ManualInput(
									_user$project$Blick_View_Editor$sanitizeEmail(_p35._0))
							})
					});
			case 'AutoCompleted':
				return _elm_lang$core$Native_Utils.update(
					_p36,
					{
						value_: _elm_lang$core$Native_Utils.update(
							_p37,
							{
								edit: _user$project$Blick_Type$AutoCompleted(
									_user$project$Blick_View_Editor$sanitizeEmail(_p35._0))
							})
					});
			default:
				return _p36;
		}
	} else {
		return _p36;
	}
};
var _user$project$Blick_View_Editor$floatingFormStyle = F3(
	function (right, top, width) {
		return _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'right',
						_1: A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(right),
							'px')
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'top',
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(top),
								'px')
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'min-width',
								_1: A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(width),
									'px')
							},
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _user$project$Blick_View_Editor$materialFieldInput = F2(
	function (_p39, _p38) {
		var _p40 = _p39;
		var _p44 = _p40.windowSize;
		var _p41 = _p38;
		var _p43 = _p41.domRect;
		var _p42 = A2(_user$project$Blick_View_Editor$formTopAndSwitch, _p44.height, _p43.top);
		var formTop = _p42._0;
		var buttonComesFirst = _p42._1;
		return A2(
			_elm_lang$html$Html$form,
			{
				ctor: '::',
				_0: A2(
					_user$project$Blick_View_Parts$onWithoutPropagate,
					'submit',
					_elm_lang$core$Json_Decode$succeed(
						A2(
							_user$project$Blick_Type$SubmitEdit,
							_p41.matId,
							_user$project$Blick_View_Editor$finalizeEdit(_p41.field)))),
				_1: {
					ctor: '::',
					_0: A3(
						_user$project$Blick_View_Editor$floatingFormStyle,
						(_elm_lang$core$Basics$toFloat(_p44.width) - _p43.left) - _p43.width,
						formTop,
						_p43.width),
					_1: {ctor: '[]'}
				}
			},
			A3(_user$project$Blick_View_Editor$formContents, buttonComesFirst, _p40, _p41));
	});
var _user$project$Blick_View_Editor$modal = F2(
	function (model, editState) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('modal is-active'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('modal-background'),
						_1: {
							ctor: '::',
							_0: _user$project$Blick_View_Parts$onClickNoPropagate(_user$project$Blick_Type$CancelEdit),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('modal-close is-large'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', 'close'),
								_1: {
									ctor: '::',
									_0: _user$project$Blick_View_Parts$onClickNoPropagate(_user$project$Blick_Type$CancelEdit),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Blick_View_Editor$materialFieldInput, model, editState),
						_1: {ctor: '[]'}
					}
				}
			});
	});

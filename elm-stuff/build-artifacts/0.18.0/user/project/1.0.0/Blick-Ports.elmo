var _user$project$Blick_Ports$fieldFromPort = function (_p0) {
	var _p1 = _p0;
	return A2(
		_user$project$Blick_Type$Field,
		_p1.name_,
		A2(_user$project$Blick_Type$Editable, _p1.value_prev, _user$project$Blick_Type$UnTouched));
};
var _user$project$Blick_Ports$fieldForPort = function (_p2) {
	var _p3 = _p2;
	return {name_: _p3.name_, value_prev: _p3.value_.prev};
};
var _user$project$Blick_Ports$lockScroll = _elm_lang$core$Native_Platform.outgoingPort(
	'lockScroll',
	function (v) {
		return null;
	});
var _user$project$Blick_Ports$unlockScroll = _elm_lang$core$Native_Platform.outgoingPort(
	'unlockScroll',
	function (v) {
		return null;
	});
var _user$project$Blick_Ports$queryEditorDOMRectPort = _elm_lang$core$Native_Platform.outgoingPort(
	'queryEditorDOMRectPort',
	function (v) {
		return [
			v._0,
			{
			name_: v._1.name_,
			value_prev: (v._1.value_prev.ctor === 'Nothing') ? null : v._1.value_prev._0
		},
			v._2
		];
	});
var _user$project$Blick_Ports$queryEditorDOMRect = F3(
	function (_p5, field, _p4) {
		var _p6 = _p5;
		var _p7 = _p4;
		return _user$project$Blick_Ports$queryEditorDOMRectPort(
			{
				ctor: '_Tuple3',
				_0: _p6._0,
				_1: _user$project$Blick_Ports$fieldForPort(field),
				_2: _p7._0
			});
	});
var _user$project$Blick_Ports$listenEditorDOMRectSub = _elm_lang$core$Native_Platform.incomingPort(
	'listenEditorDOMRectSub',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (x0) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (x1) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (x2) {
							return _elm_lang$core$Json_Decode$succeed(
								{ctor: '_Tuple3', _0: x0, _1: x1, _2: x2});
						},
						A2(
							_elm_lang$core$Json_Decode$index,
							2,
							A2(
								_elm_lang$core$Json_Decode$andThen,
								function (left) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (top) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (width) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (height) {
															return _elm_lang$core$Json_Decode$succeed(
																{left: left, top: top, width: width, height: height});
														},
														A2(_elm_lang$core$Json_Decode$field, 'height', _elm_lang$core$Json_Decode$float));
												},
												A2(_elm_lang$core$Json_Decode$field, 'width', _elm_lang$core$Json_Decode$float));
										},
										A2(_elm_lang$core$Json_Decode$field, 'top', _elm_lang$core$Json_Decode$float));
								},
								A2(_elm_lang$core$Json_Decode$field, 'left', _elm_lang$core$Json_Decode$float))));
				},
				A2(
					_elm_lang$core$Json_Decode$index,
					1,
					A2(
						_elm_lang$core$Json_Decode$andThen,
						function (name_) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (value_prev) {
									return _elm_lang$core$Json_Decode$succeed(
										{name_: name_, value_prev: value_prev});
								},
								A2(
									_elm_lang$core$Json_Decode$field,
									'value_prev',
									_elm_lang$core$Json_Decode$oneOf(
										{
											ctor: '::',
											_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
											_1: {
												ctor: '::',
												_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
												_1: {ctor: '[]'}
											}
										})));
						},
						A2(_elm_lang$core$Json_Decode$field, 'name_', _elm_lang$core$Json_Decode$string))));
		},
		A2(_elm_lang$core$Json_Decode$index, 0, _elm_lang$core$Json_Decode$string)));
var _user$project$Blick_Ports$listenEditorDOMRect = function (toMsg) {
	return _user$project$Blick_Ports$listenEditorDOMRectSub(
		function (_p8) {
			var _p9 = _p8;
			return A3(
				toMsg,
				_user$project$Blick_Type$MatId(_p9._0),
				_user$project$Blick_Ports$fieldFromPort(_p9._1),
				_p9._2);
		});
};
var _user$project$Blick_Ports$FieldThruPort = F2(
	function (a, b) {
		return {name_: a, value_prev: b};
	});

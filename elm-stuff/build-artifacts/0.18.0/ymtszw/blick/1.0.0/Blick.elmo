var _ymtszw$blick$Blick$debounceSub = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1.deb;
	if (_p2.ctor === 'Grounded') {
		return _elm_lang$core$Platform_Sub$none;
	} else {
		if (_p2._0 === 0) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: A2(
						_elm_lang$core$Time$every,
						_ymtszw$blick$Blick_Constant$debTick,
						_elm_lang$core$Basics$always(_ymtszw$blick$Blick_Type$DebDrop)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Time$every,
							_ymtszw$blick$Blick_Constant$debTick,
							_elm_lang$core$Basics$always(_p2._1)),
						_1: {ctor: '[]'}
					}
				});
		} else {
			return A2(
				_elm_lang$core$Time$every,
				_ymtszw$blick$Blick_Constant$debTick,
				function (_p3) {
					return A2(_ymtszw$blick$Blick_Type$DebTick, _p2._0 - 1, _p2._1);
				});
		}
	}
};
var _ymtszw$blick$Blick$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$window$Window$resizes(_ymtszw$blick$Blick_Type$WindowSize),
			_1: {
				ctor: '::',
				_0: _ymtszw$blick$Blick_Keybinds$subscriptions(model),
				_1: {
					ctor: '::',
					_0: _ymtszw$blick$Blick_Ports$listenEditorDOMRect(_ymtszw$blick$Blick_Type$StartEdit),
					_1: {
						ctor: '::',
						_0: _ymtszw$blick$Blick$debounceSub(model),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _ymtszw$blick$Blick$fallbackSize = A2(_elm_lang$window$Window$Size, 800, 600);
var _ymtszw$blick$Blick$fromFlags = function (flags) {
	var dec = A2(
		_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
		A2(
			_elm_community$json_extra$Json_Decode_Extra_ops['|:'],
			_elm_lang$core$Json_Decode$succeed(
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					})),
			A2(
				_elm_lang$core$Json_Decode$field,
				'windowSize',
				A3(
					_elm_lang$core$Json_Decode$map2,
					_elm_lang$window$Window$Size,
					A2(_elm_lang$core$Json_Decode$field, 'width', _elm_lang$core$Json_Decode$int),
					A2(_elm_lang$core$Json_Decode$field, 'height', _elm_lang$core$Json_Decode$int)))),
		A2(_elm_lang$core$Json_Decode$field, 'materials', _ymtszw$blick$Blick_Type$matDictDecoder));
	return A2(
		_elm_lang$core$Result$withDefault,
		{ctor: '_Tuple2', _0: _ymtszw$blick$Blick$fallbackSize, _1: _ymtszw$blick$Blick_Type$matDictEmpty},
		A2(_elm_lang$core$Json_Decode$decodeValue, dec, flags));
};
var _ymtszw$blick$Blick$init = F2(
	function (flags, location) {
		var _p4 = _ymtszw$blick$Blick$fromFlags(flags);
		var ws = _p4._0;
		var ms = _p4._1;
		return A2(
			_NoRedInk$rocket_update$Rocket_ops['=>'],
			{
				materials: ms,
				editing: _elm_lang$core$Maybe$Nothing,
				selectedSuggestion: _elm_lang$core$Maybe$Nothing,
				matches: {ctor: '[]'},
				filter: A2(_ymtszw$blick$Blick_Type$FilterState, false, ''),
				members: {ctor: '[]'},
				carouselPage: 0,
				tablePage: 0,
				route: _ymtszw$blick$Blick_Router$route(location),
				exceptions: _elm_lang$core$Dict$empty,
				windowSize: ws,
				deb: _ymtszw$blick$Blick_Type$Grounded
			},
			{
				ctor: '::',
				_0: _ymtszw$blick$Blick_Client$listMaterials,
				_1: {ctor: '[]'}
			});
	});
var _ymtszw$blick$Blick$main = A2(
	_elm_lang$navigation$Navigation$programWithFlags,
	_ymtszw$blick$Blick_Type$Loc,
	{
		init: F2(
			function (flags, location) {
				return _NoRedInk$rocket_update$Rocket$batchInit(
					A2(_ymtszw$blick$Blick$init, flags, location));
			}),
		update: function (_p5) {
			return _NoRedInk$rocket_update$Rocket$batchUpdate(
				_ymtszw$blick$Blick_Update$update(_p5));
		},
		subscriptions: _ymtszw$blick$Blick$subscriptions,
		view: _ymtszw$blick$Blick_View$view
	})(_elm_lang$core$Json_Decode$value);

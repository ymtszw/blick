var _ymtszw$blick$Blick_Update$toggleFocus = F2(
	function (elementId, focusing) {
		return A2(
			_elm_lang$core$Task$attempt,
			_elm_lang$core$Basics$always(_ymtszw$blick$Blick_Type$NoOp),
			focusing ? _elm_lang$dom$Dom$focus(elementId) : _elm_lang$dom$Dom$blur(elementId));
	});
var _ymtszw$blick$Blick_Update$extraCmdsByEditingField = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$core$Native_Utils.eq(_p1.name_, 'author_email') ? {
		ctor: '::',
		_0: _ymtszw$blick$Blick_Client$listMembers,
		_1: {ctor: '[]'}
	} : {ctor: '[]'};
};
var _ymtszw$blick$Blick_Update$crossedSingleColumnMax = F2(
	function (oldSize, newSize) {
		return ((_elm_lang$core$Native_Utils.cmp(oldSize.width, _ymtszw$blick$Blick_Constant$singleColumnMaxWidthPx) < 1) && (_elm_lang$core$Native_Utils.cmp(newSize.width, _ymtszw$blick$Blick_Constant$singleColumnMaxWidthPx) > 0)) || ((_elm_lang$core$Native_Utils.cmp(oldSize.width, _ymtszw$blick$Blick_Constant$singleColumnMaxWidthPx) > 0) && (_elm_lang$core$Native_Utils.cmp(newSize.width, _ymtszw$blick$Blick_Constant$singleColumnMaxWidthPx) < 1));
	});
var _ymtszw$blick$Blick_Update$crossedMobileMax = F2(
	function (oldSize, newSize) {
		return ((_elm_lang$core$Native_Utils.cmp(oldSize.width, _ymtszw$blick$Blick_Constant$mobileMaxWidthPx) < 1) && (_elm_lang$core$Native_Utils.cmp(newSize.width, _ymtszw$blick$Blick_Constant$mobileMaxWidthPx) > 0)) || ((_elm_lang$core$Native_Utils.cmp(oldSize.width, _ymtszw$blick$Blick_Constant$mobileMaxWidthPx) > 0) && (_elm_lang$core$Native_Utils.cmp(newSize.width, _ymtszw$blick$Blick_Constant$mobileMaxWidthPx) < 1));
	});
var _ymtszw$blick$Blick_Update$resetPagesAtWindowSizeThresholds = F2(
	function (_p2, newSize) {
		var _p3 = _p2;
		var _p5 = _p3.windowSize;
		var _p4 = _p3;
		return A2(_ymtszw$blick$Blick_Update$crossedMobileMax, _p5, newSize) ? _elm_lang$core$Native_Utils.update(
			_p4,
			{windowSize: newSize, carouselPage: 0, tablePage: 0}) : (A2(_ymtszw$blick$Blick_Update$crossedSingleColumnMax, _p5, newSize) ? _elm_lang$core$Native_Utils.update(
			_p4,
			{windowSize: newSize, carouselPage: 0}) : _elm_lang$core$Native_Utils.update(
			_p4,
			{windowSize: newSize}));
	});
var _ymtszw$blick$Blick_Update$maybeMatchingIdImpl = F3(
	function (_p6, word, maybeId) {
		var _p7 = _p6;
		var _p11 = _p7._0;
		var _p8 = maybeId;
		if (_p8.ctor === 'Just') {
			return maybeId;
		} else {
			return A2(
				_elm_lang$core$String$contains,
				word,
				_elm_lang$core$String$toLower(_p7._1.title)) ? _elm_lang$core$Maybe$Just(_p11) : A2(
				_elm_lang$core$Maybe$andThen,
				function (_p9) {
					var _p10 = _p9;
					return A2(
						_elm_lang$core$String$contains,
						word,
						_elm_lang$core$String$toLower(_p10._0)) ? _elm_lang$core$Maybe$Just(_p11) : _elm_lang$core$Maybe$Nothing;
				},
				_p7._1.author_email);
		}
	});
var _ymtszw$blick$Blick_Update$maybeMatchingId = F2(
	function (words, _p12) {
		var _p13 = _p12;
		return _p13._1.excluded ? _elm_lang$core$Maybe$Nothing : A3(
			_elm_lang$core$List$foldl,
			_ymtszw$blick$Blick_Update$maybeMatchingIdImpl(_p13),
			_elm_lang$core$Maybe$Nothing,
			words);
	});
var _ymtszw$blick$Blick_Update$findMatchingIdsImpl = F2(
	function (materials, words) {
		return A2(
			_elm_lang$core$List$filterMap,
			_ymtszw$blick$Blick_Update$maybeMatchingId(words),
			_ymtszw$blick$Blick_Type$matDictToList(materials));
	});
var _ymtszw$blick$Blick_Update$whitespaces = _elm_lang$core$Regex$regex('\\s+');
var _ymtszw$blick$Blick_Update$findMatchingIds = F2(
	function (materials, input) {
		return A2(
			_ymtszw$blick$Blick_Update$findMatchingIdsImpl,
			materials,
			A2(
				_elm_lang$core$List$filter,
				function (_p14) {
					return !_elm_lang$core$String$isEmpty(_p14);
				},
				A3(
					_elm_lang$core$Regex$split,
					_elm_lang$core$Regex$All,
					_ymtszw$blick$Blick_Update$whitespaces,
					_elm_lang$core$String$toLower(input))));
	});
var _ymtszw$blick$Blick_Update$update = F2(
	function (msg, _p15) {
		var _p16 = _p15;
		var _p26 = _p16;
		var _p25 = _p16.materials;
		var _p24 = _p16.filter;
		var _p23 = _p16.exceptions;
		var _p17 = msg;
		switch (_p17.ctor) {
			case 'Loc':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{
							route: _ymtszw$blick$Blick_Router$route(_p17._0)
						}),
					{ctor: '[]'});
			case 'GoTo':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_p26,
					_ymtszw$blick$Blick_Router$goto(_p17._0));
			case 'NoOp':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_p26,
					{ctor: '[]'});
			case 'WindowSize':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					A2(_ymtszw$blick$Blick_Update$resetPagesAtWindowSizeThresholds, _p26, _p17._0),
					{ctor: '[]'});
			case 'TimedErr':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{
							exceptions: A3(
								_elm_lang$core$Dict$insert,
								_p17._1,
								_ymtszw$blick$Blick_Type$fromHttpError(_p17._0),
								_p23)
						}),
					{ctor: '[]'});
			case 'CloseErr':
				var _p18 = _p17._0;
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{
							exceptions: A3(
								_elm_lang$core$Dict$update,
								_p18,
								_elm_lang$core$Maybe$map(
									function (e) {
										return _elm_lang$core$Native_Utils.update(
											e,
											{isOpen: false});
									}),
								_p23)
						}),
					{
						ctor: '::',
						_0: A2(
							_elm_lang$core$Task$perform,
							_elm_lang$core$Basics$always(
								_ymtszw$blick$Blick_Type$PurgeErr(_p18)),
							_elm_lang$core$Process$sleep(_ymtszw$blick$Blick_Constant$exceptionCloseFullMs)),
						_1: {ctor: '[]'}
					});
			case 'PurgeErr':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{
							exceptions: A2(_elm_lang$core$Dict$remove, _p17._0, _p23)
						}),
					{ctor: '[]'});
			case 'ClientRes':
				if (_p17._0.ctor === 'Ok') {
					switch (_p17._0._0.ctor) {
						case 'ListMaterials':
							return A2(
								_NoRedInk$rocket_update$Rocket_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									_p26,
									{
										materials: A2(_ymtszw$blick$Blick_Type$matDictUnion, _p17._0._0._0, _p25)
									}),
								{ctor: '[]'});
						case 'GetMaterial':
							return A2(
								_NoRedInk$rocket_update$Rocket_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									_p26,
									{
										materials: A3(_ymtszw$blick$Blick_Type$matDictInsert, _p17._0._0._0._0, _p17._0._0._0._1, _p25)
									}),
								{ctor: '[]'});
						case 'UpdateMaterialField':
							return A2(
								_NoRedInk$rocket_update$Rocket_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									_p26,
									{
										materials: A3(_ymtszw$blick$Blick_Type$matDictInsert, _p17._0._0._0._0, _p17._0._0._0._1, _p25)
									}),
								{ctor: '[]'});
						default:
							return A2(
								_NoRedInk$rocket_update$Rocket_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									_p26,
									{members: _p17._0._0._0}),
								{ctor: '[]'});
					}
				} else {
					return A2(
						_NoRedInk$rocket_update$Rocket_ops['=>'],
						_p26,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$perform,
								_ymtszw$blick$Blick_Type$TimedErr(_p17._0._0),
								_elm_lang$core$Time$now),
							_1: {ctor: '[]'}
						});
				}
			case 'SetCarouselPage':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{carouselPage: _p17._0}),
					{ctor: '[]'});
			case 'SetTablePage':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{tablePage: _p17._0}),
					{ctor: '[]'});
			case 'InputFilter':
				if (_p17._0 === '') {
					return A2(
						_NoRedInk$rocket_update$Rocket_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							_p26,
							{
								matches: {ctor: '[]'},
								filter: _elm_lang$core$Native_Utils.update(
									_p24,
									{value_: ''})
							}),
						{ctor: '[]'});
				} else {
					var _p19 = _p17._0;
					return A2(
						_NoRedInk$rocket_update$Rocket_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							_p26,
							{
								matches: A2(_ymtszw$blick$Blick_Update$findMatchingIds, _p25, _p19),
								filter: _elm_lang$core$Native_Utils.update(
									_p24,
									{value_: _p19}),
								carouselPage: 0,
								tablePage: 0
							}),
						{ctor: '[]'});
				}
			case 'DebLift':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{
							deb: A2(_ymtszw$blick$Blick_Type$Excited, _p17._0, _p17._1)
						}),
					{ctor: '[]'});
			case 'DebTick':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{
							deb: A2(_ymtszw$blick$Blick_Type$Excited, _p17._0, _p17._1)
						}),
					{ctor: '[]'});
			case 'DebDrop':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{deb: _ymtszw$blick$Blick_Type$Grounded}),
					{ctor: '[]'});
			case 'SetFilterFocus':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{
							filter: _elm_lang$core$Native_Utils.update(
								_p24,
								{focused: _p17._0})
						}),
					{ctor: '[]'});
			case 'FocusFilter':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_p26,
					{
						ctor: '::',
						_0: A2(_ymtszw$blick$Blick_Update$toggleFocus, _ymtszw$blick$Blick_Constant$filterBoxId, _p17._0),
						_1: {ctor: '[]'}
					});
			case 'InitiateEdit':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_p26,
					{
						ctor: '::',
						_0: A3(_ymtszw$blick$Blick_Ports$queryEditorDOMRect, _p17._0, _p17._1, _p17._2),
						_1: {ctor: '[]'}
					});
			case 'StartEdit':
				var _p21 = _p17._0;
				var _p20 = _p17._1;
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{
							editing: _elm_lang$core$Maybe$Just(
								A3(_ymtszw$blick$Blick_Type$EditState, _p21, _p20, _p17._2)),
							selectedSuggestion: _elm_lang$core$Maybe$Nothing
						}),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_ymtszw$blick$Blick_Update$extraCmdsByEditingField(_p20),
						{
							ctor: '::',
							_0: A2(
								_ymtszw$blick$Blick_Update$toggleFocus,
								A2(_ymtszw$blick$Blick_Type$inputId, _p21, _p20),
								true),
							_1: {ctor: '[]'}
						}));
			case 'InputEdit':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{
							editing: _elm_lang$core$Maybe$Just(
								_elm_lang$core$Native_Utils.update(
									_p17._0,
									{
										field: _elm_lang$core$Native_Utils.update(
											_p17._0.field,
											{value_: _p17._1})
									})),
							selectedSuggestion: _elm_lang$core$Maybe$Nothing
						}),
					{ctor: '[]'});
			case 'CompleteEdit':
				var _p22 = _p17._0.field;
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{
							editing: _elm_lang$core$Maybe$Just(
								_elm_lang$core$Native_Utils.update(
									_p17._0,
									{
										field: _elm_lang$core$Native_Utils.update(
											_p22,
											{value_: _p17._1})
									})),
							selectedSuggestion: _elm_lang$core$Maybe$Nothing
						}),
					{
						ctor: '::',
						_0: A2(
							_ymtszw$blick$Blick_Update$toggleFocus,
							A2(_ymtszw$blick$Blick_Type$inputId, _p17._0.matId, _p22),
							true),
						_1: {ctor: '[]'}
					});
			case 'SelectSuggestion':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{
							selectedSuggestion: _elm_lang$core$Maybe$Just(_p17._0)
						}),
					{ctor: '[]'});
			case 'SubmitEdit':
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{editing: _elm_lang$core$Maybe$Nothing, selectedSuggestion: _elm_lang$core$Maybe$Nothing}),
					{
						ctor: '::',
						_0: A2(_ymtszw$blick$Blick_Client$updateMaterialField, _p17._0, _p17._1),
						_1: {
							ctor: '::',
							_0: _ymtszw$blick$Blick_Ports$unlockScroll(
								{ctor: '_Tuple0'}),
							_1: {ctor: '[]'}
						}
					});
			default:
				return A2(
					_NoRedInk$rocket_update$Rocket_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						_p26,
						{editing: _elm_lang$core$Maybe$Nothing, selectedSuggestion: _elm_lang$core$Maybe$Nothing}),
					{
						ctor: '::',
						_0: _ymtszw$blick$Blick_Ports$unlockScroll(
							{ctor: '_Tuple0'}),
						_1: {ctor: '[]'}
					});
		}
	});

var _ymtszw$blick$Blick_View_Suggestion$selectedClass = F2(
	function (selectedSuggestion, index) {
		var _p0 = A2(
			_elm_lang$core$Maybe$map,
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				})(index),
			selectedSuggestion);
		if ((_p0.ctor === 'Just') && (_p0._0 === true)) {
			return ' is-active';
		} else {
			return '';
		}
	});
var _ymtszw$blick$Blick_View_Suggestion$menuItem = F4(
	function (_p1, selectedSuggestion, index, item) {
		var _p2 = _p1;
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'dropdown-item',
						A2(_ymtszw$blick$Blick_View_Suggestion$selectedClass, selectedSuggestion, index))),
				_1: {
					ctor: '::',
					_0: _ymtszw$blick$Blick_View_Parts$onClickNoPropagate(
						A2(
							_ymtszw$blick$Blick_Type$CompleteEdit,
							_p2,
							A2(
								_ymtszw$blick$Blick_Type$Editable,
								_p2.field.value_.prev,
								_ymtszw$blick$Blick_Type$AutoCompleted(item)))),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(item),
				_1: {ctor: '[]'}
			});
	});
var _ymtszw$blick$Blick_View_Suggestion$menu = F3(
	function (oldEditState, selectedSuggestion, suggestions) {
		var _p3 = suggestions;
		if (_p3.ctor === '[]') {
			return _elm_lang$html$Html$text('');
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('dropdown-menu'),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'menu'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('dropdown-content'),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$List$indexedMap,
							A2(_ymtszw$blick$Blick_View_Suggestion$menuItem, oldEditState, selectedSuggestion),
							suggestions)),
					_1: {ctor: '[]'}
				});
		}
	});
var _ymtszw$blick$Blick_View_Suggestion$cycleSelectedSuggestion = F3(
	function (plusOrMinus1, numOfSuggestions, selectedSuggestion) {
		var calculateNew = function (from) {
			var tmpNew = plusOrMinus1(from);
			return (_elm_lang$core$Native_Utils.cmp(tmpNew, numOfSuggestions) > -1) ? 0 : ((_elm_lang$core$Native_Utils.cmp(tmpNew, 0) < 0) ? (numOfSuggestions - 1) : tmpNew);
		};
		var _p4 = selectedSuggestion;
		if (_p4.ctor === 'Just') {
			return calculateNew(_p4._0);
		} else {
			return calculateNew(-1);
		}
	});
var _ymtszw$blick$Blick_View_Suggestion$selectSuggestionOrNothing = F3(
	function (numOfSuggestions, selectedSuggestion, _p5) {
		var _p6 = _p5;
		var _p8 = _p6.keyCode;
		var _p7 = _p6.ctrlKey;
		return (_elm_lang$core$Native_Utils.eq(_p8, _SwiftsNamesake$proper_keyboard$Keyboard_Key$Down) || (_p7 && _elm_lang$core$Native_Utils.eq(_p8, _SwiftsNamesake$proper_keyboard$Keyboard_Key$N))) ? _elm_lang$core$Maybe$Just(
			_ymtszw$blick$Blick_Type$SelectSuggestion(
				A3(
					_ymtszw$blick$Blick_View_Suggestion$cycleSelectedSuggestion,
					function (v) {
						return v + 1;
					},
					numOfSuggestions,
					selectedSuggestion))) : ((_elm_lang$core$Native_Utils.eq(_p8, _SwiftsNamesake$proper_keyboard$Keyboard_Key$Up) || (_p7 && _elm_lang$core$Native_Utils.eq(_p8, _SwiftsNamesake$proper_keyboard$Keyboard_Key$P))) ? _elm_lang$core$Maybe$Just(
			_ymtszw$blick$Blick_Type$SelectSuggestion(
				A3(
					_ymtszw$blick$Blick_View_Suggestion$cycleSelectedSuggestion,
					function (v) {
						return v - 1;
					},
					numOfSuggestions,
					selectedSuggestion))) : _elm_lang$core$Maybe$Nothing);
	});
var _ymtszw$blick$Blick_View_Suggestion$complete = F3(
	function (_p9, suggestions, index) {
		var _p10 = _p9;
		var _p11 = A2(_elm_lang$core$List$drop, index, suggestions);
		if (_p11.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				A2(
					_ymtszw$blick$Blick_Type$CompleteEdit,
					_p10,
					A2(
						_ymtszw$blick$Blick_Type$Editable,
						_p10.field.value_.prev,
						_ymtszw$blick$Blick_Type$AutoCompleted(_p11._0))));
		}
	});
var _ymtszw$blick$Blick_View_Suggestion$upAndDownKeys = {
	ctor: '::',
	_0: {
		ctor: '::',
		_0: _SwiftsNamesake$proper_keyboard$Keyboard_Key$Up,
		_1: {ctor: '[]'}
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '::',
			_0: _SwiftsNamesake$proper_keyboard$Keyboard_Key$Ctrl(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: _SwiftsNamesake$proper_keyboard$Keyboard_Key$P,
				_1: {ctor: '[]'}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _SwiftsNamesake$proper_keyboard$Keyboard_Key$Down,
				_1: {ctor: '[]'}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '::',
					_0: _SwiftsNamesake$proper_keyboard$Keyboard_Key$Ctrl(_elm_lang$core$Maybe$Nothing),
					_1: {
						ctor: '::',
						_0: _SwiftsNamesake$proper_keyboard$Keyboard_Key$N,
						_1: {ctor: '[]'}
					}
				},
				_1: {ctor: '[]'}
			}
		}
	}
};
var _ymtszw$blick$Blick_View_Suggestion$keydownHandler = F3(
	function (oldEditState, selectedSuggestion, suggestions) {
		var _p12 = suggestions;
		if (_p12.ctor === '[]') {
			return _elm_lang$html$Html_Attributes$style(
				{ctor: '[]'});
		} else {
			var numOfSuggestions = _elm_lang$core$List$length(suggestions);
			var _p13 = selectedSuggestion;
			if (_p13.ctor === 'Just') {
				return A2(
					_ymtszw$blick$Blick_View_Parts$onWithoutPropagate,
					'keydown',
					A2(
						_ymtszw$blick$Blick_Keybinds$decodeKeyboardEventSelectively,
						{
							ctor: '::',
							_0: {
								ctor: '::',
								_0: _SwiftsNamesake$proper_keyboard$Keyboard_Key$Enter,
								_1: {ctor: '[]'}
							},
							_1: _ymtszw$blick$Blick_View_Suggestion$upAndDownKeys
						},
						function (event) {
							return _elm_lang$core$Native_Utils.eq(event.keyCode, _SwiftsNamesake$proper_keyboard$Keyboard_Key$Enter) ? A3(_ymtszw$blick$Blick_View_Suggestion$complete, oldEditState, suggestions, _p13._0) : A3(_ymtszw$blick$Blick_View_Suggestion$selectSuggestionOrNothing, numOfSuggestions, selectedSuggestion, event);
						}));
			} else {
				return A2(
					_ymtszw$blick$Blick_View_Parts$onWithoutPropagate,
					'keydown',
					A2(
						_ymtszw$blick$Blick_Keybinds$decodeKeyboardEventSelectively,
						_ymtszw$blick$Blick_View_Suggestion$upAndDownKeys,
						A2(_ymtszw$blick$Blick_View_Suggestion$selectSuggestionOrNothing, numOfSuggestions, selectedSuggestion)));
			}
		}
	});
var _ymtszw$blick$Blick_View_Suggestion$dropdown = F4(
	function (selectedSuggestion, oldEditState, suggestions, makeTriggerElement) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('dropdown is-active'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: makeTriggerElement(
					A3(_ymtszw$blick$Blick_View_Suggestion$keydownHandler, oldEditState, selectedSuggestion, suggestions)),
				_1: {
					ctor: '::',
					_0: A3(_ymtszw$blick$Blick_View_Suggestion$menu, oldEditState, selectedSuggestion, suggestions),
					_1: {ctor: '[]'}
				}
			});
	});

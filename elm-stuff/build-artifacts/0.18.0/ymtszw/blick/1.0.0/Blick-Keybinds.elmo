var _ymtszw$blick$Blick_Keybinds$globalKeydownHandler = F2(
	function (_p0, keyCode) {
		var _p1 = _p0;
		var _p2 = _p1.filter;
		return (_elm_lang$core$Native_Utils.eq(keyCode, 27) && _ymtszw$blick$Util$isJust(_p1.editing)) ? _ymtszw$blick$Blick_Type$CancelEdit : ((_elm_lang$core$Native_Utils.eq(keyCode, 27) && _p2.focused) ? _ymtszw$blick$Blick_Type$FocusFilter(false) : (((_elm_lang$core$Native_Utils.eq(keyCode, 191) || _elm_lang$core$Native_Utils.eq(keyCode, 83)) && (!_p2.focused)) ? _ymtszw$blick$Blick_Type$FocusFilter(true) : _ymtszw$blick$Blick_Type$NoOp));
	});
var _ymtszw$blick$Blick_Keybinds$subscriptions = function (model) {
	return _elm_lang$keyboard$Keyboard$downs(
		_ymtszw$blick$Blick_Keybinds$globalKeydownHandler(model));
};
var _ymtszw$blick$Blick_Keybinds$isTargetedKeybindEvent = F2(
	function (_p3, keys) {
		var _p4 = _p3;
		return A2(
			_elm_lang$core$List$all,
			function (key) {
				var _p5 = key;
				switch (_p5.ctor) {
					case 'Shift':
						return _p4.shiftKey;
					case 'Ctrl':
						return _p4.ctrlKey;
					case 'Alt':
						return _p4.altKey;
					case 'Command':
						return _p4.metaKey;
					default:
						return _elm_lang$core$Native_Utils.eq(_p5, _p4.keyCode);
				}
			},
			keys);
	});
var _ymtszw$blick$Blick_Keybinds$matchTargetKeybinds = F2(
	function (event, targetKeyBinds) {
		var _p6 = targetKeyBinds;
		if (_p6.ctor === '[]') {
			return false;
		} else {
			return A2(_ymtszw$blick$Blick_Keybinds$isTargetedKeybindEvent, event, _p6._0) || A2(_ymtszw$blick$Blick_Keybinds$matchTargetKeybinds, event, _p6._1);
		}
	});
var _ymtszw$blick$Blick_Keybinds$decodeKeyboardEventSelectively = F2(
	function (targetKeyBinds, maybeMsg) {
		return _Gizra$elm_keyboard_event$Keyboard_Event$considerKeyboardEvent(
			function (event) {
				return A2(_ymtszw$blick$Blick_Keybinds$matchTargetKeybinds, event, targetKeyBinds) ? maybeMsg(event) : _elm_lang$core$Maybe$Nothing;
			});
	});
